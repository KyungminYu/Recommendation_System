package recommend;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.Collections;
import java.util.List;

import dbHandling.DBHandler;
import javafx.util.Pair;

public class Recommender {
	private List<MovieInfo> movieInfos = new ArrayList<>();
	private List<PersonInfo> personInfos = new ArrayList<>();
	private List<RecommendInfo> recommendInfos = new ArrayList<>();
	private DBHandler dbHandler = new DBHandler();
	private double[] weights;
	private double[] theta;

	public Recommender() {
		initPerson();
	}

	// 데이터 베이스에서 뽑아서 입력
	private void addMovie(MovieInfo info) {
		if(!info.getOpenYr().equals(""))
			movieInfos.add(info);

		// 나중에 영화가 더 추가 되었을 때
		for (int i = 0; i < personInfos.size(); i++) {
			personInfos.get(i).addMovie();
		}
	}
	public void initMovieSet(List<MovieInfo> movies){
		for(int i=0;i<movies.size();i++)
			addMovie(movies.get(i));
	}
	// 사용자 추가
	private void initPerson() {
		personInfos = dbHandler.getUserList();
	}

	// 추천 배열을 정렬해서 반환
	public List<RecommendInfo> getRecommend(String id) {
		initMovieRate(id);
		calcRates(getPersonInd(id));
		Collections.sort(recommendInfos, new NoAscCompare());

		return recommendInfos;
	}

	private void initMovieRate(String id){
		ArrayList<EvalInfo> list = dbHandler.getEvals(id);
		for(int i=0;i<list.size();i++){
			setRate(id, list.get(i).getMovieCd(), list.get(i).getEval());
		}
	}
	private void setRate(String id, String movieCd, double rate) {
		int ind = getMovieInd(movieCd);
		getPerson(id).setRate(ind, rate);
	}

	public int getMovieInd(String movieCd) {
		for (int i = 0; i < movieInfos.size(); i++) {
			if (movieInfos.get(i).getMovieCd().equals(movieCd))
				return i;
		}
		return -1;
	}

	public int getPersonInd(String id) {
		for (int i = 0; i < personInfos.size(); i++) {
			if (personInfos.get(i).getID().equals(id))
				return i;
		}
		return -1;
	}

	public PersonInfo getPerson(String id) {
		for (int i = 0; i < personInfos.size(); i++) {
			if (personInfos.get(i).getID().equals(id))
				return personInfos.get(i);
		}
		return null;
	}

	// 보지 않은 영화 별점 예측
	private void calcRates(int personInd) {
		double rate;
		setTheta(personInd);
		for (int i = 0; i < movieInfos.size(); i++) {
			rate = personInfos.get(personInd).getRate(i);
			if (rate == -1) {
				double cnt = 0;
				rate = 0;
				for (int j = 1; j <= 21; j++) {
					setWeight(i);
					rate += weights[j] * theta[j];
					cnt += weights[j];
				}
				if(cnt==0)
					rate = 0;
				else
					rate /= cnt;
				recommendInfos.add(new RecommendInfo(movieInfos.get(i).getMovieCd(), movieInfos.get(i).getMovieName(), rate));
			}
		}

	}

	private void setWeight(int movieInd) {
		weights = movieInfos.get(movieInd).getWeights();
	}

	private void setTheta(int personInd) {
		theta = new double[22];
		theta[0] = 0.0;
		for (int i = 1; i <= 21; i++) {
			theta[i] = 0.0;
			int cnt = 0;
			double rate = -1;
			double weight = 0;
			for (int k = 0; k < movieInfos.size(); k++) {
				rate = personInfos.get(personInd).getRate(k);
				weight = movieInfos.get(k).getWeight(i);
				if (rate != -1 && weight != 0) {
					theta[i] += rate * weight;
					cnt++;
				}
			}
			if (cnt == 0)
				theta[i] = 0;
			else
				theta[i] /= cnt;
		}
	}

	static class NoAscCompare implements Comparator<RecommendInfo> {
		@Override
		public int compare(RecommendInfo arg0, RecommendInfo arg1) {
			/*// TODO Auto-generated method stub
			if (arg0.getRate() > arg1.getRate())
				return -1;
			else if (arg0.getRate() == arg1.getRate()){*/
				if(Integer.parseInt(arg0.getCd()) < Integer.parseInt(arg1.getCd()))
					return 1;
				else if(Integer.parseInt(arg0.getCd()) == Integer.parseInt(arg1.getCd()))
					return 0;
				else
					return -1;
			/*}
			else
				return 1;*/
		}
	}
}
